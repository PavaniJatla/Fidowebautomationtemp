plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.15.1'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'net.researchgate.release' version '2.8.1'
    id 'net.saliman.properties' version '1.5.1'
    id 'com.aditya.SauceConnectPlugin' version '0.0.15'
}


sauceconnect {
    username = System.getenv('SAUCE_USERNAME')
    key = System.getenv('SAUCE_ACCESS_KEY')
    options = "-i myTunnel --no-remove-colliding-tunnels"
}

def sauce = [
        username: sauceconnect.username,
        key     : sauceconnect.key,
]


task "sauceTest"(dependsOn: startSauceConnect, type: Test) {

    if(!test_browser){
        test_browser='saucechrome'
    }

    if (!test_browser.contains('sauce')){
        def browser = 'sauce'+test_browser
        test_browser = browser
    }


    systemProperty 'QaUrl', test_qaURL
    systemProperty 'SSPUrl', test_sspURL
    systemProperty 'AWSUrl', test_awsURL
    systemProperty 'AWSPRODUrl', test_awsPRODURL
    systemProperty 'Browser', test_browser
    systemProperty 'Language', test_language
    systemProperty 'EnsUrl', test_ensURL
    systemProperty 'PageLoadStrategy', test_PageLoadStrategy
    systemProperty 'CookieFetcherMapping', test_CookieFetcherMapping
    systemProperty 'OneViewUrl', test_oneViewUrl
    systemProperty 'OneViewEnv',  test_oneViewEnv

    systemProperties(System.getProperties())
    outputs.upToDateWhen { false }  // Always run tests
    useTestNG() {
        parallel = test_parallel
        threadCount = test_threadCount as int
        Set listeners = ["extentreport.ExtentListener", "ca.fido.test.listeners.AnnotationTransformer"]
        setListeners(listeners)
        if (project.hasProperty('test_groupName')){
            includeGroups test_groupName
            System.out.println("**************************************"+test_groupName)
        }
        
    }

}

//To shutdown the sauceconnect
sauceTest.finalizedBy stopSauceConnect

task "localTest"(type: Test) {

    if (test_browser && test_browser.contains('sauce')){
        def browser = test_browser.replace('sauce','')
        test_browser = browser
    }
    systemProperty 'QaUrl', test_qaURL
    systemProperty 'SSPUrl', test_sspURL
    systemProperty 'Browser', test_browser
    systemProperty 'AWSUrl', test_awsURL
    systemProperty 'AWSPRODUrl', test_awsPRODURL
    systemProperty 'Language', test_language
    systemProperty 'EnsUrl', test_ensURL
    systemProperty 'PageLoadStrategy', test_PageLoadStrategy
    systemProperty 'CookieFetcherMapping', test_CookieFetcherMapping
    systemProperty 'OneViewUrl', test_oneViewUrl
    systemProperty 'OneViewEnv',  test_oneViewEnv

    systemProperties(System.getProperties())
    outputs.upToDateWhen { false }  // Always run tests
    useTestNG() {
        parallel = test_parallel
        threadCount = test_threadCount as int
        Set listeners = ["extentreport.ExtentListener", "ca.fido.test.listeners.AnnotationTransformer"]
        setListeners(listeners)
        if (project.hasProperty('test_groupName')){
            includeGroups test_groupName
            System.out.println("**************************************"+test_groupName)
        }
        
    }

}

repositories {
//    mavenLocal()
    maven {
        url = "${artifactory_url}/${artifactory_repoKey}"
        credentials {
            username "${artifactory_username}"
            password "${artifactory_password}"
        }
    }
    mavenCentral()
}

dependencies {

    api 'automation-utils:common-utils:1.68-SNAPSHOT'
    api 'io.rest-assured:rest-assured:4.3.1'
	api 'io.rest-assured:json-path:4.3.1'
	api 'org.json:json:20180813'
    api 'org.yaml:snakeyaml:1.24'
    api 'com.applitools:eyes-selenium-java3:3.199.1'
}

group = 'ca.fido'
version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

sourceSets {

    test {
        java {
            srcDir 'src'
        }
    }

}


jar {
    enabled = true
    manifest {
        attributes 'provider': 'gradle'
    }

}


configurations {
    published
}

compileJava {
    options.encoding = 'UTF-8'

}

compileTestJava {
   options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile)
        {
            options.compilerArgs << '-Xlint:unchecked'
            options.deprecation = true
        }

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

javadoc {
    exclude 'com/Fido/test/**'
    exclude 'com/Fido/yaml/**'
    source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    exclude 'com/Fido/test/**'
    exclude 'com/Fido/yaml/**'
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    published sourceJar
    published javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = "${project.group}"
        }
    }
}

artifactory {
    contextUrl = "${artifactory_url}"
    publish {
        repository {
            repoKey = "${artifactory_repoKey}"
            username = "${artifactory_username}"
            password = "${artifactory_password}"
        }
        defaults {
            publications('maven')
            publishConfigs('archives', 'published')
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
            publishIvy = false
        }
    }
}

artifactoryPublish {
    dependsOn jar, sourceJar, javadocJar
}

