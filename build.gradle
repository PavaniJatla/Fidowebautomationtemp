plugins {
	id 'java'
	id 'java-library'
	id 'maven-publish'
	id 'com.jfrog.artifactory' version '4.15.1'
	id 'io.github.karthick1110.SauceConnectPlugin' version '0.0.6'
}

sauceAuth {
	username = System.getenv('SAUCE_USERNAME')
	key = System.getenv('SAUCE_ACCESS_KEY')
	options = "--tunnel-pool --tunnel-name myTunnel "
}


def sauce = [
		username: sauceAuth.username,
		key     : sauceAuth.key,
]


//task "sauceTest"(type: Test) {
task "sauceTest"(dependsOn: startSauceConnect, type: Test){
	if(!test_browser){
		test_browser='saucechrome'
	}

	if (!test_browser.contains('sauce')){
		def browser = 'sauce'+test_browser
		test_browser = browser
	}


	systemProperty 'QaUrl', test_qaURL
	systemProperty 'QaOVUrl', test_qaOVURL
	systemProperty 'OVUrl', test_OVUrl
	systemProperty 'AWSUrl', test_awsURL
	systemProperty 'AWSPRODUrl', test_awsPRODURL
	systemProperty 'Browser', test_browser
	systemProperty 'Language', test_language
	systemProperty 'DbEnvUrl', test_DbEnvUrl
	systemProperty 'EnsUrl', test_ensURL
	systemProperty 'SearchUrl', test_searchURL
	systemProperty 'OneViewEnv',  test_oneViewEnv
	systemProperty 'URIautoRegister', test_URIautoRegister
	systemProperty 'URIEmailer', test_URIEmailer
	systemProperty 'PageLoadStrategy', test_PageLoadStrategy
	systemProperty 'CookieFetcherMapping', test_CookieFetcherMapping
	systemProperty 'OVRURL', test_ovr
	systemProperty 'XrayImportFlag', xray_import_flag
	systemProperty 'JiraProjectKey', jira_project_key
	systemProperty 'TestPlanKey',test_plan_key
	systemProperty 'TestExecutionKey',test_execution_key
	systemProperty 'JiraTestRepoPath',jira_Test_Repo_Path
	systemProperty 'JiraAssignee', test_jira_assignee
	systemProperty 'JiraReporter', test_jira_reporter
	systemProperty 'DBImportFlag', db_update_flag
	systemProperty 'ReleaseName', test_release
	systemProperty 'RunType', test_runType
	systemProperty 'ApplicationName', test_ApplicationName
	systemProperty 'ensEnv',test_ens_env
	systemProperty 'OVFidoUrl' , test_OVFidoUrl
	systemProperty 'TunnelName', "Digital_Mobile_QA"
	systemProperty 'ReleaseName', test_release
	systemProperty 'TestEnv', test_env
	systemProperty 'TestUrl', test_TestURL
	systemProperty 'IsPieChartRequired', IsPieChartRequired
	//systemProperty 'TunnelName', TunnelName
	//systemProperty 'parentTunnelOwner', parentTunnelOwner
	systemProperty 'TunnelName', "Digital_Mobile_QA"
	systemProperty 'parentTunnelOwner', "DigitalQAWebAutomation"


	useTestNG(){
		outputDirectory = file("$project.buildDir//testngOutput")
		useDefaultListeners = true
		parallel = test_parallel
		threadCount = test_threadCount as int
		Set listeners = [ "extentreport.ExtentListener" , "com.rogers.test.listeners.AnnotationTransformer"]
		setListeners(listeners)
		if (project.hasProperty('test_groupName')){
			includeGroups test_groupName
			System.out.println("**************************************"+test_groupName)
		}

	}

}


//To shutdown the sauceconnect
sauceTest.finalizedBy stopSauceConnect

task "localTest"(type: Test) {
	if (test_browser && test_browser.contains('sauce')){
		def browser = test_browser.replace('sauce','')
		test_browser = browser
	}
	systemProperty 'QaUrl', test_qaURL
	systemProperty 'QaOVUrl', test_qaOVURL
	systemProperty 'OVUrl', test_OVUrl
	systemProperty 'AWSUrl', test_awsURL
	systemProperty 'AWSPRODUrl', test_awsPRODURL
	systemProperty 'Browser', test_browser
	systemProperty 'Language', test_language
	systemProperty 'DbEnvUrl', test_DbEnvUrl
	systemProperty 'EnsUrl', test_ensURL
	systemProperty 'OneViewEnv',  test_oneViewEnv
	systemProperty 'SearchUrl', test_searchURL
	systemProperty 'URIautoRegister', test_URIautoRegister
	systemProperty 'URIEmailer', test_URIEmailer
	systemProperty 'PageLoadStrategy', test_PageLoadStrategy
	systemProperty 'CookieFetcherMapping', test_CookieFetcherMapping
	systemProperty 'OVRURL', test_ovr
	systemProperty 'XrayImportFlag', xray_import_flag
	systemProperty 'JiraProjectKey', jira_project_key
	systemProperty 'TestPlanKey',test_plan_key
	systemProperty 'TestExecutionKey',test_execution_key
	systemProperty 'JiraTestRepoPath',jira_Test_Repo_Path
	systemProperty 'JiraAssignee', test_jira_assignee
	systemProperty 'JiraReporter', test_jira_reporter
	systemProperty 'DBImportFlag', db_update_flag
	systemProperty 'ReleaseName', test_release
	systemProperty 'RunType', test_runType
	systemProperty 'ApplicationName', test_ApplicationName
	systemProperty 'OVFidoUrl' , test_OVFidoUrl
	systemProperty 'ensEnv',test_ens_env
	systemProperty 'ReleaseName', test_release
	systemProperty 'TestEnv', test_env
	systemProperty 'TestUrl', test_TestURL
	systemProperty 'IsPieChartRequired', IsPieChartRequired

	systemProperties(System.getProperties())
	outputs.upToDateWhen { false }  // Always run tests

	useTestNG() {
		outputDirectory = file("$project.buildDir//testngOutput")
		useDefaultListeners = true
		parallel = test_parallel
		threadCount = test_threadCount as int
		Set listeners = [ "extentreport.ExtentListener" , "com.rogers.test.listeners.AnnotationTransformer"]
		setListeners(listeners)

		if (project.hasProperty('test_groupName')){
			includeGroups test_groupName
			System.out.println("**************************************"+test_groupName)
		}

	}

}


repositories {
	//mavenLocal()
	maven {
		url = "${artifactory_url}/${artifactory_repoKey}"
		credentials {
			username "${artifactory_username}"
			password "${artifactory_password}"
		}
	}
	mavenCentral()
}

dependencies {
	api 'automation-utils:common-utils:1.82-20230802.184515-2'
//	api 'io.rest-assured:rest-assured:4.3.1'
//	api 'io.rest-assured:json-path:4.3.1'
//	api 'org.json:json:20180813'
	api 'org.yaml:snakeyaml:1.24'
	//implementation group: 'com.oracle.database.jdbc', name: 'ojdbc8', version: '21.1.0.0'
//	api 'com.oracle.database.jdbc:ojdbc8:21.1.0.0'
}

group = 'com.rogers'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'

sourceSets {

	test {
		java {
			srcDir 'src'
		}
	}

}

jar {
	enabled = true
	manifest {
		attributes 'provider': 'gradle'
	}

}

configurations {
	published
}

compileJava {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

javadoc {
	exclude 'com/Rogers/test/**'
	exclude 'com/Rogers/yaml/**'
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	exclude 'com/Rogers/test/**'
	exclude 'com/Rogers/yaml/**'
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

//def gitPullCheck(){
//	System.out.println("******************GIT PULL CHECK**************")
//	def gitCommitCount =  'git rev-list HEAD..origin/develop --count'.execute().getText()
//	def count = Integer.parseInt(gitCommitCount.trim())
//	if(count>0){
//		print " ************************* Your current branch is "+ count +" commits behind from the develop branch and Pull is needed *************************\n"
//	} else if (count==0){
//		print "************************* Your current branch is up to date with develop and no pull request is required at present*************************\n"
//	} else {
//		print " ************************* Your current branch is "+ -count +" commits ahead of the develop branch and Push is needed *************************\n"
//	}
//}

artifacts {
	published sourceJar
	published javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			groupId = "${project.group}"
		}
	}
}

artifactory {
	contextUrl = "${artifactory_url}"
	publish {
		repository {
			repoKey = "${artifactory_repoKey}"
			username = "${artifactory_username}"
			password = "${artifactory_password}"
		}
		defaults {
			publications('maven')
			publishConfigs('archives', 'published')
			publishBuildInfo = true
			publishArtifacts = true
			publishPom = true
			publishIvy = false
		}
	}
//	gitPullCheck()
}

artifactoryPublish {
	dependsOn jar, sourceJar, javadocJar
}
