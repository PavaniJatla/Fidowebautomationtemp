boolean success(String message) {
    currentBuild.result = 'SUCCESS'
    echo message
    return false;
}

boolean shouldRun() {
    String message = sh(label: 'Get Commit Message', script: 'git log -1 --pretty=%B', returnStdout: true).trim()

    if (message.matches('.*\\[skip ci].*')) {
        return success('[skip] commit message contains [skip ci]')
    } else if (env.BRANCH_NAME != 'master' && message.matches("^\\[release] 'v.*")) {
        return success('[skip] only build releases on the master branch')
    } else {
        return true
    }
}

void toolSh(String command) {
    container('java-buildtools') {
        sh command
    }
}

def REPORT_URL = "https://qa1.rogers.com/Digital-QE/"
def readProp;
pipeline {
    agent {
        kubernetes {
            yamlFile 'jenkins-agent.yml'
            defaultContainer 'tools'
            podRetention never()
        }
    }
    parameters {

        string(name: 'Browser', defaultValue: "saucechrome", description: 'Test Browser')
        string(name: 'Language', defaultValue: "en", description: 'Test Language')
        string(name: 'ThreadCount', defaultValue: "2", description: 'Number of parallel test sessions')
        string(name: 'Groups', defaultValue: "SanityCH", description: 'Groups names separated by comma')
        string(name: 'TestProfile', defaultValue: "DefaultProfile", description: 'Only used for reporting - has no impact on test runs')
        string(name: 'IndividualTests', defaultValue: "", description: "Individual tests to be passed as Test1 Test2 Test3 Test4 and so on ")
        string(name: 'PageLoadStrategy', defaultValue: "NORMAL", description: "Give the strategy as NORMAL , EAGER or NONE")
        string(name: 'QaUrl', defaultValue: "", description: "Test QA URL Link")
        string(name: 'DbEnvUrl', defaultValue: "", description: "Database URL")
        string(name: 'SearchUrl', defaultValue: "", description: "Search URL Link")
        string(name: 'QaOVUrl', defaultValue: "", description: "QA OV URL Link")
        string(name: 'AWSBYODUrl', defaultValue: "", description: "BFA AWS BYOD URL")
        string(name: 'AWSUrl', defaultValue: "", description: "BFA AWS URL")
    }

    triggers {
        parameterizedCron(env.BRANCH_NAME == 'master' ?'''
                    # leave spaces where you want them around the parameters. They'll be trimmed.
                    # we let the build run with the default name
                    00 05 * * 1-5 %Browser=saucechrome;Language=en;Groups=SanityCH;ThreadCount=2;TestProfile=ConnectedHome
                    30 05 * * 1-5 %Browser=saucechrome;Language=en;Groups=SanitySS;ThreadCount=3;TestProfile=SelfServe
                    00 07 * * 1-5 %Browser=saucechrome;Language=en;Groups=SanityBFA;ThreadCount=3;TestProfile=BuyFlows
                    
                ''':'')
    }

    environment {
        SAUCE_USERNAME = credentials('SAUCE_USERNAME')
        SAUCE_ACCESS_KEY = credentials('SAUCE_ACCESS_KEY')
        FTP_SERVER = credentials('FTP_SERVER')
        FTP_USERNAME = credentials('FTP_USERNAME')
        FTP_PASSWORD = credentials('FTP_PASSWORD')
        ENS_USERNAME= credentials('ENS_USERNAME')
        ENS_PASSWORD= credentials('ENS_PASSWORD')
    }
    stages {
        stage('Run CI?') {
            when { expression { shouldRun() } }
            stages {


                stage('Environment Variables') {
                    steps { sh 'env | sort' }
                }
                stage('Credentials') {
                    environment {
                        GITHUB_CREDENTIALS = credentials('github_daws_svc_account')
                        ARTIFACTORY_CREDENTIALS = credentials('artifactory_serv_svc_dawsdev')
                        SONARQUBE_TOKEN = credentials('sonarqube_serv_svc_dawsdev')
                    }
                    steps {

                        toolSh 'github-credentials.sh'
                        toolSh 'artifactory-credentials.sh'
                        toolSh 'sonarqube-credentials.sh'
                    }
                }


                stage('Regression Tests') {
                    steps {
                        script {
                            readProp = readProperties file: 'gradle.properties';
                            String urlLink="";
                            if(!params.QaUrl.isEmpty()){
                                if (params.QaUrl.toUpperCase().contains("ROGERS")) {
                                     if (!params.QaUrl.contains("qa1.")  && !params.QaUrl.contains("qa5.")  && !params.QaUrl.contains("qa6.")  && !params.QaUrl.contains("qa7.") && !params.QaUrl.contains("qa2.") && !params.QaUrl.contains("qa3.") && !params.QaUrl.contains("qa4.") ) {
                                            error "Invalid QA url provided. We only accept QAURL from QA 1 to QA7. Please correct it."
                                     }
                                }
                                urlLink = urlLink + "-Ptest_qaURL=${params.QaUrl}";
                            }
                            if(!params.QaOVUrl.isEmpty()){
                                urlLink = urlLink + "-Ptest_qaOVURL=${params.QaOVUrl}";
                            }
                            if(!params.AWSUrl.isEmpty()){
                                urlLink = urlLink + "-Ptest_awsURL=${params.AWSUrl}";
                            }
                            if(!params.AWSBYODUrl.isEmpty()){
                                urlLink = urlLink + "-Ptest_awsBYODURL=${params.AWSBYODUrl}";
                            }
                            if(!params.SearchUrl.isEmpty()){
                                urlLink = urlLink + "-Ptest_searchURL=${params.SearchUrl}";
                            }
                            if (params.IndividualTests.isEmpty()){
                                if(urlLink.isEmpty()){
                                    toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} -Ptest_groupName='${params.Groups}' -Ptest_threadCount=${params.ThreadCount} -i --stacktrace"
                                }else{
                                    toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} -Ptest_groupName='${params.Groups}' -Ptest_threadCount=${params.ThreadCount} ${urlLink} -i --stacktrace"
                                }
                            }
                            else
                                if(urlLink.isEmpty()){
                                    toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} ${generateTestString(params.IndividualTests)} -Ptest_threadCount=${params.ThreadCount} -i --stacktrace"
                                }else{
                                    toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} ${generateTestString(params.IndividualTests)} -Ptest_threadCount=${params.ThreadCount} ${urlLink} -i --stacktrace"
                                }
                        }
                    }
                    post {
                        always {
                            junit 'build/test-results/**/*.xml'
                            script {
                                def jobName = "${env.JOB_NAME}"
                                def buildTimeStamp = "${env.BUILD_TIMESTAMP}"
                                def testProfile = "${env.TestProfile}"
                                def destinationFolder = jobName.replaceAll("\\s+", "").replace("digital-qe/", "") + "/" + testProfile + "/" + buildTimeStamp.replaceAll("\\s+", "") + "/"
                                sh label: 'NS upload', script: """ 
                                netstorage-upload.sh /mnt/ns/nskey.pem ./report Digital-QE/
                                """
                                REPORT_URL = "${REPORT_URL}" + "/report/" + destinationFolder + "/results.html"
                            }

                        }
                    }
                }


            }
        }
    }

    post {

        success {
            echo "${env.BUILD_URL} has result success"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://outlook.office.com/webhook/e3556c59-ec6f-42ad-b0e7-7e48d22625f9@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/5d661927cebd40b7aa69763ce38023d4/151ebd21-71c4-47a1-b389-3a13bf9ccbf1', status: "SUCCESS"
        }
        failure {
            echo "${env.BUILD_URL} has result fail"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://outlook.office.com/webhook/e3556c59-ec6f-42ad-b0e7-7e48d22625f9@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/5d661927cebd40b7aa69763ce38023d4/151ebd21-71c4-47a1-b389-3a13bf9ccbf1', status: "FAIL"
        }
        unstable {
            echo "${env.BUILD_URL} is unstable"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} build #${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://outlook.office.com/webhook/e3556c59-ec6f-42ad-b0e7-7e48d22625f9@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/5d661927cebd40b7aa69763ce38023d4/151ebd21-71c4-47a1-b389-3a13bf9ccbf1', status: "UNSTABLE"
        }
    }


}

String generateTestString(String tests) {
    //  String tests="OneViewCH_TC_003_IgniteNACDualPlayWithout4KTVExpressCheckout OneViewCH_TC_004_MigrationTriplePlayON OneViewCH_TC_017_TV_ResetParentalControlsAndRestartBoxTest OneViewCH_TC_018a_TV_HeaderFooterUserForgotPurchasePinTest OneViewCH_TC_018b_Internet_HeaderFooterUsageTest OneViewCH_TC_018c_HomePhone_HeaderFooterResetVoiceMailTest OneViewCH_TC_018d_Internet_DashboardSupportLinksAvailabilityTest OneViewCH_TC_018e_TV_DashboardSupportLinksAvailabilityTest OneViewCH_TC_018f_TV_ChannelLineupViewPDFTest";
    tests =tests.trim();
    String[] strArray=tests.split(" ");
    String finalTestString="";
    for (int i=0;i<=strArray.length-1;i++){
        finalTestString=finalTestString+"--tests '"+strArray[i].replace(".java","")+"' ";
    }

    return finalTestString;
}